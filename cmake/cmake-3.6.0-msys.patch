diff -aur cmake-3.6.0/bootstrap.orig cmake-3.6.0/bootstrap
--- cmake-3.6.0/bootstrap.orig	2016-04-15 09:41:29.000000000 -0400
+++ cmake-3.6.0/bootstrap	2016-05-22 12:02:31.104568400 -0400
@@ -87,6 +87,13 @@
   cmake_system_cygwin=false
 fi
 
+# Determine whether this is a MSYS environment.
+if echo "${cmake_system}" | grep MSYS >/dev/null 2>&1; then
+  cmake_system_msys=true
+else
+  cmake_system_msys=false
+fi
+
 # Determine whether this is a MinGW environment.
 if echo "${cmake_system}" | grep MINGW >/dev/null 2>&1; then
   cmake_system_mingw=true
@@ -732,6 +739,10 @@
   cmake_ld_flags="${LDFLAGS} -Wl,--enable-auto-import"
 fi
 
+if ${cmake_system_msys}; then
+  cmake_ld_flags="${LDFLAGS} -Wl,--enable-auto-import"
+fi
+
 # Add CoreFoundation framework on Darwin
 if ${cmake_system_darwin}; then
   cmake_ld_flags="${LDFLAGS} -framework CoreFoundation"
@@ -763,6 +774,7 @@
 case "${cmake_system}" in
   *AIX*)   cmake_toolchains='XL GNU' ;;
   *CYGWIN*) cmake_toolchains='GNU' ;;
+  *MSYS*) cmake_toolchains='GNU' ;;
   *Darwin*) cmake_toolchains='GNU Clang' ;;
   *Linux*) cmake_toolchains='GNU Clang XL PGI PathScale' ;;
   *MINGW*) cmake_toolchains='GNU' ;;
diff -aur cmake-3.6.0/CMakeCPack.cmake.orig cmake-3.6.0/CMakeCPack.cmake
--- cmake-3.6.0/CMakeCPack.cmake.orig	2016-04-15 09:41:19.000000000 -0400
+++ cmake-3.6.0/CMakeCPack.cmake	2016-05-22 17:29:34.072190400 -0400
@@ -54,6 +54,8 @@
     # cygwin is good for the system name
     if("x${CMAKE_SYSTEM_NAME}" STREQUAL "xCYGWIN")
       set(CPACK_SYSTEM_NAME Cygwin)
+    elseif("${CMAKE_SYSTEM_NAME}" STREQUAL "MSYS")
+      set(CPACK_SYSTEM_NAME MSYS)
     else()
       set(CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
     endif()
@@ -155,7 +157,7 @@
     # if the CPACK_PACKAGE_FILE_NAME is not defined by the cache
     # default to source package - system, on cygwin system is not
     # needed
-    if(CYGWIN)
+    if(CYGWIN OR MSYS)
       set(CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}")
     else()
       set(CPACK_PACKAGE_FILE_NAME
@@ -172,7 +174,7 @@
   endif()
 
   # cygwin specific packaging stuff
-  if(CYGWIN)
+  if(CYGWIN OR MSYS)
     # setup the cygwin package name
     set(CPACK_PACKAGE_NAME cmake)
     # setup the name of the package for cygwin cmake-2.4.3
diff -aur cmake-3.6.0/Modules/CMakeCCompiler.cmake.in.orig cmake-3.6.0/Modules/CMakeCCompiler.cmake.in
--- cmake-3.6.0/Modules/CMakeCCompiler.cmake.in.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeCCompiler.cmake.in	2016-05-22 12:24:33.915496300 -0400
@@ -22,10 +22,16 @@
 set(CMAKE_C_ABI_COMPILED @CMAKE_C_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
+if(CMAKE_COMPILER_IS_MSYS)
+  #set(CYGWIN 1)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
 
 set(CMAKE_C_COMPILER_ENV_VAR "CC")
 
diff -aur cmake-3.6.0/Modules/CMakeCXXCompiler.cmake.in.orig cmake-3.6.0/Modules/CMakeCXXCompiler.cmake.in
--- cmake-3.6.0/Modules/CMakeCXXCompiler.cmake.in.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeCXXCompiler.cmake.in	2016-05-22 12:31:00.598407100 -0400
@@ -22,10 +22,16 @@
 set(CMAKE_CXX_ABI_COMPILED @CMAKE_CXX_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_MSYS @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
+if(CMAKE_COMPILER_IS_MSYS)
+  #set(CYGWIN 1)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
 
 set(CMAKE_CXX_COMPILER_ENV_VAR "CXX")
 
diff -Naur cmake-3.6.0/Modules/CMakeDetermineCCompiler.cmake cmake-3.6.0-msys/Modules/CMakeDetermineCCompiler.cmake
--- cmake-3.6.0/Modules/CMakeDetermineCCompiler.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeDetermineCCompiler.cmake	2016-05-22 17:17:45.309910700 -0400
@@ -125,6 +125,8 @@
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_C_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_C_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 endif()
 
diff -Naur cmake-3.6.0/Modules/CMakeDetermineCXXCompiler.cmake cmake-3.6.0-msys/Modules/CMakeDetermineCXXCompiler.cmake
--- cmake-3.6.0/Modules/CMakeDetermineCXXCompiler.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeDetermineCXXCompiler.cmake	2016-05-22 17:29:34.087815200 -0400
@@ -120,6 +120,8 @@
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_CXX_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_CXX_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 endif()
 
diff -aur cmake-3.6.0/Modules/CMakeDetermineFortranCompiler.cmake.orig cmake-3.6.0/Modules/CMakeDetermineFortranCompiler.cmake
--- cmake-3.6.0/Modules/CMakeDetermineFortranCompiler.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeDetermineFortranCompiler.cmake	2016-05-22 12:46:34.512113600 -0400
@@ -206,6 +206,9 @@
         if("${CMAKE_COMPILER_OUTPUT}" MATCHES "THIS_IS_CYGWIN")
           set(CMAKE_Fortran_PLATFORM_ID "Cygwin")
         endif()
+        if("${CMAKE_COMPILER_OUTPUT}" MATCHES ".*THIS_IS_MSYS.*" )
+          set(CMAKE_Fortran_PLATFORM_ID "MSYS")
+        endif()
       endif()
     endif()
   endif()
@@ -218,6 +221,8 @@
     set(CMAKE_COMPILER_IS_MINGW 1)
   elseif(CMAKE_Fortran_PLATFORM_ID MATCHES "Cygwin")
     set(CMAKE_COMPILER_IS_CYGWIN 1)
+  elseif(CMAKE_Fortran_PLATFORM_ID MATCHES "MSYS")
+    set(CMAKE_COMPILER_IS_MSYS 1)
   endif()
 endif()
 
diff -aur cmake-3.6.0/Modules/CMakeDetermineSystem.cmake.orig cmake-3.6.0/Modules/CMakeDetermineSystem.cmake
--- cmake-3.6.0/Modules/CMakeDetermineSystem.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeDetermineSystem.cmake	2016-05-22 12:31:00.629656700 -0400
@@ -38,6 +38,7 @@
 # Tru64                         Tru64
 # Ultrix                        ULTRIX
 # cygwin                        CYGWIN_NT-5.1
+# MSYS                          MSYS_NT-6.1
 # MacOSX                        Darwin
 
 
@@ -47,7 +48,7 @@
   if(CMAKE_UNAME)
     exec_program(uname ARGS -s OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_NAME)
     exec_program(uname ARGS -r OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_VERSION)
-    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|Darwin|^GNU$")
+    if(CMAKE_HOST_SYSTEM_NAME MATCHES "Linux|CYGWIN.*|MSYS.*|Darwin|^GNU$")
       exec_program(uname ARGS -m OUTPUT_VARIABLE CMAKE_HOST_SYSTEM_PROCESSOR
         RETURN_VALUE val)
       if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin" AND
@@ -152,6 +153,11 @@
     set(${_PREFIX}_NAME CYGWIN)
   endif()
 
+  # fix for MSYS which has windows version in it
+  if(${_PREFIX}_NAME MATCHES MSYS)
+    set(${_PREFIX}_NAME MSYS)
+  endif()
+
   # set CMAKE_SYSTEM to the CMAKE_SYSTEM_NAME
   set(${_PREFIX}  ${${_PREFIX}_NAME})
   # if there is a CMAKE_SYSTEM_VERSION then add a -${CMAKE_SYSTEM_VERSION}
diff -aur cmake-3.6.0/Modules/CMakeFortranCompiler.cmake.in.orig cmake-3.6.0/Modules/CMakeFortranCompiler.cmake.in
--- cmake-3.6.0/Modules/CMakeFortranCompiler.cmake.in.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeFortranCompiler.cmake.in	2016-05-22 12:50:42.919457400 -0400
@@ -15,11 +15,18 @@
 set(CMAKE_Fortran_ABI_COMPILED @CMAKE_Fortran_ABI_COMPILED@)
 set(CMAKE_COMPILER_IS_MINGW @CMAKE_COMPILER_IS_MINGW@)
 set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_CYGWIN@)
+set(CMAKE_COMPILER_IS_CYGWIN @CMAKE_COMPILER_IS_MSYS@)
 if(CMAKE_COMPILER_IS_CYGWIN)
   set(CYGWIN 1)
   set(UNIX 1)
 endif()
 
+if(CMAKE_COMPILER_IS_MSYS)
+  #set(CYGWIN 1)
+  set(MSYS 1)
+  set(UNIX 1)
+endif()
+
 set(CMAKE_Fortran_COMPILER_ENV_VAR "FC")
 
 set(CMAKE_Fortran_COMPILER_SUPPORTS_F90 @CMAKE_Fortran_COMPILER_SUPPORTS_F90@)
diff -aur cmake-3.6.0/Modules/CMakeFortranCompilerId.F.in.orig cmake-3.6.0/Modules/CMakeFortranCompilerId.F.in
--- cmake-3.6.0/Modules/CMakeFortranCompilerId.F.in.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakeFortranCompilerId.F.in	2016-05-22 12:50:42.919457400 -0400
@@ -119,6 +119,8 @@
 #endif
 #if defined(__linux) || defined(__linux__) || defined(linux)
         PRINT *, 'INFO:platform[Linux]'
+#elif defined(__MSYS__)
+        PRINT *, 'INFO:platform[MSYS]'
 #elif defined(__CYGWIN__)
         PRINT *, 'INFO:platform[Cygwin]'
 #elif defined(__MINGW32__)
diff -Naur cmake-3.6.0/Modules/CMakeJavaInformation.cmake cmake-3.6.0-msys/Modules/CMakeJavaInformation.cmake
--- cmake-3.6.0/Modules/CMakeJavaInformation.cmake	2013-07-02 17:41:39.000000000 +0400
+++ cmake-3.6.0-msys/Modules/CMakeJavaInformation.cmake	2014-04-06 22:28:37.158200000 +0400
@@ -52,7 +52,7 @@
 
 # set java include flag option and the separator for multiple include paths
 set(CMAKE_INCLUDE_FLAG_Java "-classpath ")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   set(CMAKE_INCLUDE_FLAG_SEP_Java ";")
 else()
   set(CMAKE_INCLUDE_FLAG_SEP_Java ":")
diff -aur cmake-3.6.0/Modules/CMakePlatformId.h.in.orig cmake-3.6.0/Modules/CMakePlatformId.h.in
--- cmake-3.6.0/Modules/CMakePlatformId.h.in.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CMakePlatformId.h.in	2016-05-22 12:50:42.935082200 -0400
@@ -5,6 +5,9 @@
 #if defined(__linux) || defined(__linux__) || defined(linux)
 # define PLATFORM_ID "Linux"
 
+#elif defined(__MSYS__)
+# define PLATFORM_ID "MSYS"
+
 #elif defined(__CYGWIN__)
 # define PLATFORM_ID "Cygwin"
 
diff -Naur cmake-3.6.0/Modules/CMakeSystemSpecificInformation.cmake cmake-3.6.0-msys/Modules/CMakeSystemSpecificInformation.cmake
--- cmake-3.6.0/Modules/CMakeSystemSpecificInformation.cmake	2013-07-02 17:41:39.000000000 +0400
+++ cmake-3.6.0-msys/Modules/CMakeSystemSpecificInformation.cmake	2014-04-06 22:29:38.996600000 +0400
@@ -24,6 +24,7 @@
 set(APPLE  )
 set(UNIX   )
 set(CYGWIN )
+set(MSYS )
 set(WIN32  )
 
 
diff -Naur cmake-3.6.0/Modules/CMakeTestGNU.c cmake-3.6.0-msys/Modules/CMakeTestGNU.c
--- cmake-3.6.0/Modules/CMakeTestGNU.c	2013-07-02 17:41:39.000000000 +0400
+++ cmake-3.6.0-msys/Modules/CMakeTestGNU.c	2014-04-06 22:30:05.906600000 +0400
@@ -4,6 +4,8 @@
 #ifdef __MINGW32__
 void THIS_IS_MINGW();
 #endif
+#if defined(__MSYS__)
+void THIS_IS_MSYS();
+#elif defined(__CYGWIN__)
-#ifdef __CYGWIN__
 void THIS_IS_CYGWIN();
 #endif
diff -aur cmake-3.6.0/Modules/CPack.cmake.orig cmake-3.6.0/Modules/CPack.cmake
--- cmake-3.6.0/Modules/CPack.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/CPack.cmake	2016-05-22 12:50:42.950707600 -0400
@@ -449,6 +449,8 @@
   if(UNIX)
     if(CYGWIN)
       option(CPACK_BINARY_CYGWIN "Enable to build Cygwin binary packages" ON)
+    elseif(MSYS)
+      option(CPACK_BINARY_MSYS "Enable to build MSYS binary packages" ON)
     else()
       if(APPLE)
         option(CPACK_BINARY_BUNDLE       "Enable to build OSX bundles"      OFF)
@@ -477,6 +479,7 @@
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_7Z           7Z)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_BUNDLE       Bundle)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_CYGWIN       CygwinBinary)
+  cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_MSYS         MsysBinary)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_DEB          DEB)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_DRAGNDROP    DragNDrop)
   cpack_optional_append(CPACK_GENERATOR  CPACK_BINARY_IFW          IFW)
@@ -499,6 +502,8 @@
   if(UNIX)
     if(CYGWIN)
       option(CPACK_SOURCE_CYGWIN "Enable to build Cygwin source packages" ON)
+    elseif(MSYS)
+      option(CPACK_SOURCE_MSYS "Enable to build MSYS source packages" ON)
     else()
       option(CPACK_SOURCE_TBZ2 "Enable to build TBZ2 source packages" ON)
       option(CPACK_SOURCE_TGZ  "Enable to build TGZ source packages"  ON)
@@ -525,6 +530,7 @@
   CPACK_BINARY_7Z
   CPACK_BINARY_BUNDLE
   CPACK_BINARY_CYGWIN
+  CPACK_BINARY_MSYS
   CPACK_BINARY_DEB
   CPACK_BINARY_DRAGNDROP
   CPACK_BINARY_IFW
@@ -541,6 +547,7 @@
   CPACK_BINARY_ZIP
   CPACK_SOURCE_7Z
   CPACK_SOURCE_CYGWIN
+  CPACK_SOURCE_MSYS
   CPACK_SOURCE_TBZ2
   CPACK_SOURCE_TGZ
   CPACK_SOURCE_TXZ
diff -Naur cmake-3.6.0/Modules/CPackMsys.cmake cmake-3.6.0-msys/Modules/CPackMsys.cmake
--- cmake-3.6.0/Modules/CPackMsys.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/CPackMsys.cmake	2014-04-06 22:36:05.586600000 +0400
@@ -0,0 +1,33 @@
+##section Variables specific to CPack MSYS generator
+##end
+##module
+# - MSYS CPack generator (MSYS).
+# The following variable is specific to installers build on
+# and/or for MSYS:
+##end
+#
+##variable
+#   CPACK_MSYS_PATCH_NUMBER - The MSYS patch number.
+#   FIXME: This documentation is incomplete.
+##end
+##variable
+#   CPACK_MSYS_PATCH_FILE - The MSYS patch file.
+#   FIXME: This documentation is incomplete.
+##end
+##variable
+#   CPACK_MSYS_BUILD_SCRIPT - The MSYS build script.
+#   FIXME: This documentation is incomplete.
+##end
+
+#=============================================================================
+# Copyright 2006-2012 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
diff -Naur cmake-3.6.0/Modules/CPackZIP.cmake cmake-3.6.0-msys/Modules/CPackZIP.cmake
--- cmake-3.6.0/Modules/CPackZIP.cmake	2013-07-02 17:41:39.000000000 +0400
+++ cmake-3.6.0-msys/Modules/CPackZIP.cmake	2014-04-06 22:37:32.244600000 +0400
@@ -31,6 +31,15 @@
 endif()
 
 if(NOT ZIP_EXECUTABLE)
+  find_package(Msys)
+  find_program(ZIP_EXECUTABLE zip PATHS "${MSYS_INSTALL_PATH}/usr/bin")
+  if(ZIP_EXECUTABLE)
+    set(CPACK_ZIP_COMMAND "\"${ZIP_EXECUTABLE}\" -r \"<ARCHIVE>\" . -i@<FILELIST>")
+    set(CPACK_ZIP_NEED_QUOTES FALSE)
+  endif()
+endif()
+
+if(NOT ZIP_EXECUTABLE)
   find_package(Cygwin)
   find_program(ZIP_EXECUTABLE zip PATHS "${CYGWIN_INSTALL_PATH}/bin")
   if(ZIP_EXECUTABLE)
diff -aur cmake-3.6.0/Modules/ExternalProject.cmake.orig cmake-3.6.0/Modules/ExternalProject.cmake
--- cmake-3.6.0/Modules/ExternalProject.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/ExternalProject.cmake	2016-05-22 13:01:50.005726400 -0400
@@ -1300,7 +1300,7 @@
     string(REGEX REPLACE "^\\$\\(MAKE\\)" "\${make}" command "${command}")
     set(make "-Dmake=$(MAKE)")
 
-    if(WIN32 AND NOT CYGWIN)
+    if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       set(code_cygpath_make "
 if(\${make} MATCHES \"^/\")
   execute_process(
diff -aur cmake-3.6.0/Modules/FindBoost.cmake.orig cmake-3.6.0/Modules/FindBoost.cmake
--- cmake-3.6.0/Modules/FindBoost.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/FindBoost.cmake	2016-05-22 13:10:19.595304300 -0400
@@ -1113,7 +1113,7 @@
 
 set(Boost_LIB_PREFIX "")
 if ( (GHSMULTI AND Boost_USE_STATIC_LIBS) OR
-    (WIN32 AND Boost_USE_STATIC_LIBS AND NOT CYGWIN) )
+    ( WIN32 AND Boost_USE_STATIC_LIBS AND NOT CYGWIN AND NOT MSYS)
   set(Boost_LIB_PREFIX "lib")
 endif()
 
diff -aur cmake-3.6.0/Modules/FindCoin3D.cmake.orig cmake-3.6.0/Modules/FindCoin3D.cmake
--- cmake-3.6.0/Modules/FindCoin3D.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/FindCoin3D.cmake	2016-05-22 13:10:19.595304300 -0400
@@ -29,7 +29,7 @@
 #  License text for the above reference.)
 
 if (WIN32)
-  if (CYGWIN)
+  if (CYGWIN OR MSYS)
 
     find_path(COIN3D_INCLUDE_DIRS Inventor/So.h)
     find_library(COIN3D_LIBRARIES Coin)
diff -aur cmake-3.6.0/Modules/FindCurses.cmake.orig cmake-3.6.0/Modules/FindCurses.cmake > patch
--- cmake-3.6.0/Modules/FindCurses.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/FindCurses.cmake	2016-05-22 13:10:19.610932800 -0400
@@ -64,7 +64,7 @@
 # cygwin ncurses stopped providing curses.h symlinks see above
 # message.  Cygwin is an ncurses package, so force ncurses on
 # cygwin if the curses.h is missing
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   if(NOT EXISTS /usr/include/curses.h)
     set(CURSES_USE_NCURSES TRUE)
   endif()
diff -aur cmake-3.6.0/Modules/FindFLTK.cmake.orig cmake-3.6.0/Modules/FindFLTK.cmake
--- cmake-3.6.0/Modules/FindFLTK.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/FindFLTK.cmake	2016-05-22 13:10:19.610932800 -0400
@@ -73,7 +73,7 @@
 
 #  Platform dependent libraries required by FLTK
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(BORLAND)
       set( FLTK_PLATFORM_DEPENDENT_LIBS import32 )
     else()
diff -aur cmake-3.6.0/Modules/FindFLTK2.cmake.orig cmake-3.6.0/Modules/FindFLTK2.cmake
--- cmake-3.6.0/Modules/FindFLTK2.cmake.orig	2016-04-15 09:41:20.000000000 -0400
+++ cmake-3.6.0/Modules/FindFLTK2.cmake	2016-05-22 13:22:33.871208900 -0400
@@ -39,7 +39,7 @@
 
 #  Platform dependent libraries required by FLTK2
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(BORLAND)
       set( FLTK2_PLATFORM_DEPENDENT_LIBS import32 )
     else()
diff -aur cmake-3.6.0/Modules/FindGnuplot.cmake.orig cmake-3.6.0/Modules/FindGnuplot.cmake
--- cmake-3.6.0/Modules/FindGnuplot.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindGnuplot.cmake	2016-05-22 13:22:33.878710300 -0400
@@ -32,6 +32,7 @@
 #  License text for the above reference.)
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(GNUPLOT_EXECUTABLE
   NAMES
@@ -40,6 +41,7 @@
   wgnupl32
   PATHS
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 if (GNUPLOT_EXECUTABLE)
diff -Naur cmake-3.6.0/Modules/FindMsys.cmake cmake-3.6.0-msys/Modules/FindMsys.cmake
--- cmake-3.6.0/Modules/FindMsys.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/FindMsys.cmake	2014-04-06 22:41:54.745800000 +0400
@@ -0,0 +1,28 @@
+# - this module looks for MSYS
+#
+
+#=============================================================================
+# Copyright 2001-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+if (WIN32)
+  find_path(MSYS_INSTALL_PATH
+    msys2_shell.cmd
+    "C:/MSYS"
+    "[HKEY_LOCAL_MACHINE\\SOFTWARE\\MSYS\\setup;rootdir]"
+    "[HKEY_LOCAL_MACHINE\\SOFTWARE\\Cygnus Solutions\\MSYS\\mounts v2\\/;native]"
+  )
+
+  mark_as_advanced(
+    MSYS_INSTALL_PATH
+  )
+endif ()
diff -aur cmake-3.6.0/Modules/FindOpenGL.cmake.orig cmake-3.6.0/Modules/FindOpenGL.cmake
--- cmake-3.6.0/Modules/FindOpenGL.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindOpenGL.cmake	2016-05-22 13:22:33.890218700 -0400
@@ -50,7 +50,7 @@
 
 set(_OpenGL_REQUIRED_VARS OPENGL_gl_LIBRARY)
 
-if (CYGWIN)
+if (CYGWIN OR MSYS)
 
   find_path(OPENGL_INCLUDE_DIR GL/gl.h )
   list(APPEND _OpenGL_REQUIRED_VARS OPENGL_INCLUDE_DIR)
diff -aur cmake-3.6.0/Modules/FindOpenSSL.cmake.orig cmake-3.6.0/Modules/FindOpenSSL.cmake
--- cmake-3.6.0/Modules/FindOpenSSL.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindOpenSSL.cmake	2016-05-22 13:22:33.896719500 -0400
@@ -109,7 +109,7 @@
     include
 )
 
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   if(MSVC)
     # /MD and /MDd are the standard values - if someone wants to use
     # others, the libnames have to change here too
diff -aur cmake-3.6.0/Modules/FindPerl.cmake.orig cmake-3.6.0/Modules/FindPerl.cmake
--- cmake-3.6.0/Modules/FindPerl.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindPerl.cmake	2016-05-22 13:22:33.906220700 -0400
@@ -26,9 +26,11 @@
 #  License text for the above reference.)
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 set(PERL_POSSIBLE_BIN_PATHS
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   )
 
 if(WIN32)
diff -aur cmake-3.6.0/Modules/FindPNG.cmake.orig cmake-3.6.0/Modules/FindPNG.cmake
--- cmake-3.6.0/Modules/FindPNG.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindPNG.cmake	2016-05-22 13:22:33.913721400 -0400
@@ -107,7 +107,7 @@
       set(PNG_INCLUDE_DIR ${PNG_INCLUDE_DIRS} ) # for backward compatiblity
       set(PNG_LIBRARIES ${PNG_LIBRARY} ${ZLIB_LIBRARY})
 
-      if (CYGWIN)
+      if (CYGWIN OR MSYS)
         if(BUILD_SHARED_LIBS)
            # No need to define PNG_USE_DLL here, because it's default for Cygwin.
         else()
diff -aur cmake-3.6.0/Modules/FindPythonLibs.cmake.orig cmake-3.6.0/Modules/FindPythonLibs.cmake
--- cmake-3.6.0/Modules/FindPythonLibs.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindPythonLibs.cmake	2016-05-22 13:22:33.922222100 -0400
@@ -294,7 +294,7 @@
 
     if(PYTHON_MODULE_${_NAME}_BUILD_SHARED)
       set_target_properties(${_NAME} PROPERTIES PREFIX "${PYTHON_MODULE_PREFIX}")
-      if(WIN32 AND NOT CYGWIN)
+      if(WIN32 AND NOT CYGWIN AND NOT MSYS)
         set_target_properties(${_NAME} PROPERTIES SUFFIX ".pyd")
       endif()
     endif()
diff -aur cmake-3.6.0/Modules/FindQt3.cmake.orig cmake-3.6.0/Modules/FindQt3.cmake
--- cmake-3.6.0/Modules/FindQt3.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindQt3.cmake	2016-05-22 13:22:33.931223200 -0400
@@ -240,7 +240,7 @@
   set( QT_LIBRARIES ${QT_LIBRARIES} ${QT_QT_LIBRARY} )
   set( QT_DEFINITIONS "")
 
-  if (WIN32 AND NOT CYGWIN)
+  if (WIN32 AND NOT CYGWIN AND NOT MSYS)
     if (QT_QTMAIN_LIBRARY)
       # for version 3
       set (QT_DEFINITIONS -DQT_DLL -DQT_THREAD_SUPPORT -DNO_DEBUG)
diff -aur cmake-3.6.0/Modules/FindSelfPackers.cmake.orig cmake-3.6.0/Modules/FindSelfPackers.cmake
--- cmake-3.6.0/Modules/FindSelfPackers.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindSelfPackers.cmake	2016-05-22 13:22:33.938224500 -0400
@@ -26,10 +26,12 @@
 #  License text for the above reference.)
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(SELF_PACKER_FOR_EXECUTABLE
   upx
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   /bin
   /usr/bin
   /usr/local/bin
diff -Naur cmake-3.6.0/Modules/FindTclsh.cmake cmake-3.6.0-msys/Modules/FindTclsh.cmake
--- cmake-3.6.0/Modules/FindTclsh.cmake        2016-04-15 15:41:22.000000000 +0200
+++ cmake-3.6.0-msys/Modules/FindTclsh.cmake     2016-04-30 22:27:06.004149300 +0200
@@ -29,7 +29,7 @@
 # (To distribute this file outside of CMake, substitute the full
 #  License text for the above reference.)
 
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   find_program(TCL_TCLSH NAMES cygtclsh83 cygtclsh80)
 endif()
 
diff -aur cmake-3.6.0/Modules/FindThreads.cmake.orig cmake-3.6.0/Modules/FindThreads.cmake > patch
--- cmake-3.6.0/Modules/FindThreads.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindThreads.cmake	2016-05-22 13:22:33.951226200 -0400
@@ -210,7 +210,7 @@
     set(CMAKE_THREAD_LIBS_INIT )
   endif()
 
-  if(CMAKE_SYSTEM MATCHES "CYGWIN_NT")
+  if(CMAKE_SYSTEM MATCHES "CYGWIN_NT" OR CMAKE_SYSTEM MATCHES "MSYS_NT")
     set(CMAKE_USE_PTHREADS_INIT 1)
     set(Threads_FOUND TRUE)
     set(CMAKE_THREAD_LIBS_INIT )
diff -aur cmake-3.6.0/Modules/FindUnixCommands.cmake.orig cmake-3.6.0/Modules/FindUnixCommands.cmake > patch
--- cmake-3.6.0/Modules/FindUnixCommands.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindUnixCommands.cmake	2016-05-22 13:22:33.957226500 -0400
@@ -21,10 +21,12 @@
 #  License text for the above reference.)
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(BASH
   bash
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   /bin
   /usr/bin
   /usr/local/bin
@@ -37,6 +39,7 @@
 find_program(CP
   cp
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   /bin
   /usr/bin
   /usr/local/bin
@@ -49,6 +52,7 @@
 find_program(GZIP
   gzip
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   /bin
   /usr/bin
   /usr/local/bin
@@ -61,6 +65,7 @@
 find_program(MV
   mv
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   /bin
   /usr/bin
   /usr/local/bin
@@ -73,6 +78,7 @@
 find_program(RM
   rm
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   /bin
   /usr/bin
   /usr/local/bin
@@ -88,6 +94,7 @@
   gtar
   PATH
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
   /bin
   /usr/bin
   /usr/local/bin
diff -aur cmake-3.6.0/Modules/FindWget.cmake.orig cmake-3.6.0/Modules/FindWget.cmake
--- cmake-3.6.0/Modules/FindWget.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/FindWget.cmake	2016-05-22 13:22:33.963728700 -0400
@@ -25,10 +25,12 @@
 #  License text for the above reference.)
 
 include(${CMAKE_CURRENT_LIST_DIR}/FindCygwin.cmake)
+include(${CMAKE_CURRENT_LIST_DIR}/FindMsys.cmake)
 
 find_program(WGET_EXECUTABLE
   wget
   ${CYGWIN_INSTALL_PATH}/bin
+  ${MSYS_INSTALL_PATH}/usr/bin
 )
 
 # handle the QUIETLY and REQUIRED arguments and set WGET_FOUND to TRUE if
diff -aur cmake-3.6.0/Modules/GenerateExportHeader.cmake.orig cmake-3.6.0/Modules/GenerateExportHeader.cmake
--- cmake-3.6.0/Modules/GenerateExportHeader.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/GenerateExportHeader.cmake	2016-05-22 13:22:33.970728300 -0400
@@ -217,6 +217,7 @@
       AND NOT _INTEL_TOO_OLD
       AND NOT WIN32
       AND NOT CYGWIN
+      AND NOT MSYS
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES XL
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES PGI
       AND NOT CMAKE_CXX_COMPILER_ID MATCHES Watcom)
@@ -272,7 +273,7 @@
   get_property(type TARGET ${TARGET_LIBRARY} PROPERTY TYPE)
 
   if(NOT ${type} STREQUAL "STATIC_LIBRARY")
-    if(WIN32 OR CYGWIN)
+    if(WIN32 OR CYGWIN OR MSYS)
       set(DEFINE_EXPORT "__declspec(dllexport)")
       set(DEFINE_IMPORT "__declspec(dllimport)")
     elseif(COMPILER_HAS_HIDDEN_VISIBILITY AND USE_COMPILER_HIDDEN_VISIBILITY)
diff -Naur cmake-3.6.0/Modules/KDE3Macros.cmake cmake-3.6.0-msys/Modules/KDE3Macros.cmake
--- cmake-3.6.0/Modules/KDE3Macros.cmake	2013-07-02 17:41:39.000000000 +0400
+++ cmake-3.6.0-msys/Modules/KDE3Macros.cmake	2014-04-06 22:54:20.940600000 +0400
@@ -321,7 +321,7 @@
    file(APPEND ${_laname} "# The name that we can dlopen(3).\n")
    file(APPEND ${_laname} "dlname='${_soname}'\n")
    file(APPEND ${_laname} "# Names of this library\n")
-   if(CYGWIN)
+   if(CYGWIN OR MSYS)
      file(APPEND ${_laname} "library_names='${_soname}'\n")
    else()
      file(APPEND ${_laname} "library_names='${_soname} ${_soname} ${_soname}'\n")
diff -Naur "cmake-3.6.0/Modules/Platform/MSYS-GNU.cmake" "cmake-3.6.0-msys/Modules/Platform/MSYS-GNU.cmake"
--- "cmake-3.6.0/Modules/Platform/MSYS-GNU.cmake"	1970-01-01 03:00:00.000000000 +0300
+++ "cmake-3.6.0-msys/Modules/Platform/MSYS-GNU.cmake"	2013-07-02 17:41:40.000000000 +0400
@@ -0,0 +1,56 @@
+
+#=============================================================================
+# Copyright 2002-2009 Kitware, Inc.
+#
+# Distributed under the OSI-approved BSD License (the "License");
+# see accompanying file Copyright.txt for details.
+#
+# This software is distributed WITHOUT ANY WARRANTY; without even the
+# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
+# See the License for more information.
+#=============================================================================
+# (To distribute this file outside of CMake, substitute the full
+#  License text for the above reference.)
+
+# This module is shared by multiple languages; use include blocker.
+if(__MSYS_COMPILER_GNU)
+  return()
+endif()
+set(__MSYS_COMPILER_GNU 1)
+
+# TODO: Is -Wl,--enable-auto-import now always default?
+set(CMAKE_EXE_LINKER_FLAGS_INIT "-Wl,--enable-auto-import")
+set(CMAKE_CREATE_WIN32_EXE  "-mwindows")
+
+set(CMAKE_GNULD_IMAGE_VERSION
+  "-Wl,--major-image-version,<TARGET_VERSION_MAJOR>,--minor-image-version,<TARGET_VERSION_MINOR>")
+set(CMAKE_GENERATOR_RC windres)
+enable_language(RC)
+macro(__msys_compiler_gnu lang)
+  # Binary link rules.
+  set(CMAKE_${lang}_CREATE_SHARED_MODULE
+    "<CMAKE_${lang}_COMPILER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_MODULE_${lang}_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_MODULE_CREATE_${lang}_FLAGS> -o <TARGET> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
+  set(CMAKE_${lang}_CREATE_SHARED_LIBRARY
+    "<CMAKE_${lang}_COMPILER> <LANGUAGE_COMPILE_FLAGS> <CMAKE_SHARED_LIBRARY_${lang}_FLAGS> <LINK_FLAGS> <CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS> -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> ${CMAKE_GNULD_IMAGE_VERSION} <OBJECTS> <LINK_LIBRARIES>")
+  set(CMAKE_${lang}_LINK_EXECUTABLE
+    "<CMAKE_${lang}_COMPILER> <FLAGS> <CMAKE_${lang}_LINK_FLAGS> <LINK_FLAGS> <OBJECTS>  -o <TARGET> -Wl,--out-implib,<TARGET_IMPLIB> ${CMAKE_GNULD_IMAGE_VERSION} <LINK_LIBRARIES>")
+
+   # No -fPIC on MSYS
+  set(CMAKE_${lang}_COMPILE_OPTIONS_PIC "")
+  set(CMAKE_${lang}_COMPILE_OPTIONS_PIE "")
+  set(CMAKE_SHARED_LIBRARY_${lang}_FLAGS "")
+
+  # Initialize C link type selection flags.  These flags are used when
+  # building a shared library, shared module, or executable that links
+  # to other libraries to select whether to use the static or shared
+  # versions of the libraries.
+  foreach(type SHARED_LIBRARY SHARED_MODULE EXE)
+    set(CMAKE_${type}_LINK_STATIC_${lang}_FLAGS "-Wl,-Bstatic")
+    set(CMAKE_${type}_LINK_DYNAMIC_${lang}_FLAGS "-Wl,-Bdynamic")
+  endforeach()
+
+  set(CMAKE_EXE_EXPORTS_${lang}_FLAG "-Wl,--export-all-symbols")
+  # TODO: Is -Wl,--enable-auto-import now always default?
+  set(CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS} -Wl,--enable-auto-import")
+  set(CMAKE_SHARED_MODULE_CREATE_${lang}_FLAGS "${CMAKE_SHARED_LIBRARY_CREATE_${lang}_FLAGS}")
+endmacro()
diff -Naur cmake-3.6.0/Modules/Platform/MSYS.cmake cmake-3.6.0-msys/Modules/Platform/MSYS.cmake
--- cmake-3.6.0/Modules/Platform/MSYS.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/Platform/MSYS.cmake	2014-04-06 22:57:23.603800000 +0400
@@ -0,0 +1,65 @@
+if("${CMAKE_MINIMUM_REQUIRED_VERSION}" VERSION_LESS "2.8.3.20101214")
+  set(__USE_CMAKE_LEGACY_CYGWIN_WIN32 1)
+endif()
+if(NOT DEFINED WIN32)
+  set(WIN32 0)
+  if(DEFINED __USE_CMAKE_LEGACY_CYGWIN_WIN32)
+    if(NOT DEFINED CMAKE_LEGACY_CYGWIN_WIN32
+        AND DEFINED ENV{CMAKE_LEGACY_CYGWIN_WIN32})
+      set(CMAKE_LEGACY_CYGWIN_WIN32 $ENV{CMAKE_LEGACY_CYGWIN_WIN32})
+    endif()
+    if(CMAKE_LEGACY_CYGWIN_WIN32)
+      message(STATUS "Defining WIN32 under MSYS due to CMAKE_LEGACY_CYGWIN_WIN32")
+      set(WIN32 1)
+    elseif("x${CMAKE_LEGACY_CYGWIN_WIN32}" STREQUAL "x")
+      message(WARNING "CMake no longer defines WIN32 on MSYS!"
+        "\n"
+        "(1) If you are just trying to build this project, ignore this warning "
+        "or quiet it by setting CMAKE_LEGACY_CYGWIN_WIN32=0 in your environment or "
+        "in the CMake cache.  "
+        "If later configuration or build errors occur then this project may "
+        "have been written under the assumption that MSYS is WIN32.  "
+        "In that case, set CMAKE_LEGACY_CYGWIN_WIN32=1 instead."
+        "\n"
+        "(2) If you are developing this project, add the line\n"
+        "  set(CMAKE_LEGACY_CYGWIN_WIN32 0) # Remove when CMake >= 2.8.4 is required\n"
+        "at the top of your top-level CMakeLists.txt file or set the minimum "
+        "required version of CMake to 2.8.4 or higher.  "
+        "Then teach your project to build on Cygwin without WIN32.")
+    endif()
+  elseif(DEFINED CMAKE_LEGACY_CYGWIN_WIN32)
+    message(AUTHOR_WARNING "CMAKE_LEGACY_CYGWIN_WIN32 ignored because\n"
+      "  cmake_minimum_required(VERSION ${CMAKE_MINIMUM_REQUIRED_VERSION})\n"
+      "is at least 2.8.4.")
+  endif()
+endif()
+if(DEFINED __USE_CMAKE_LEGACY_CYGWIN_WIN32)
+  # Pass WIN32 legacy setting to scripts.
+  if(WIN32)
+    set(ENV{CMAKE_LEGACY_CYGWIN_WIN32} 1)
+  else()
+    set(ENV{CMAKE_LEGACY_CYGWIN_WIN32} 0)
+  endif()
+  unset(__USE_CMAKE_LEGACY_CYGWIN_WIN32)
+endif()
+
+set(MSYS 1)
+#set(CYGWIN 1)
+
+set(CMAKE_SHARED_LIBRARY_PREFIX "msys-")
+set(CMAKE_SHARED_LIBRARY_SUFFIX ".dll")
+set(CMAKE_SHARED_MODULE_PREFIX "msys-")
+set(CMAKE_SHARED_MODULE_SUFFIX ".dll")
+set(CMAKE_IMPORT_LIBRARY_PREFIX "lib")
+set(CMAKE_IMPORT_LIBRARY_SUFFIX ".dll.a")
+set(CMAKE_EXECUTABLE_SUFFIX ".exe")          # .exe
+# Modules have a different default prefix that shared libs.
+set(CMAKE_MODULE_EXISTS 1)
+
+set(CMAKE_FIND_LIBRARY_PREFIXES "lib")
+set(CMAKE_FIND_LIBRARY_SUFFIXES ".dll.a" ".a")
+
+# Shared libraries on MSYS can be named with their version number.
+set(CMAKE_SHARED_LIBRARY_NAME_WITH_VERSION 1)
+
+include(Platform/UnixPaths)
diff -Naur cmake-3.6.0/Modules/Platform/MSYS-CXX.cmake cmake-3.6.0-msys/Modules/Platform/MSYS-CXX.cmake
--- cmake-3.6.0/Modules/Platform/MSYS-CXX.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/Platform/MSYS-CXX.cmake	2013-07-02 17:41:40.000000000 +0400
@@ -0,0 +1,7 @@
+if(NOT CMAKE_CXX_COMPILER_NAMES)
+  set(CMAKE_CXX_COMPILER_NAMES c++)
+endif()
+
+# Exclude C++ compilers differing from C compiler only by case
+# because this platform may have a case-insensitive filesystem.
+set(CMAKE_CXX_COMPILER_EXCLUDE CC aCC xlC)
diff -Naur cmake-3.6.0/Modules/Platform/MSYS-GNU-C.cmake cmake-3.6.0-msys/Modules/Platform/MSYS-GNU-C.cmake
--- cmake-3.6.0/Modules/Platform/MSYS-GNU-C.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/Platform/MSYS-GNU-C.cmake	2014-04-06 22:59:38.341000000 +0400
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(C)
diff -Naur cmake-3.6.0/Modules/Platform/MSYS-GNU-CXX.cmake cmake-3.6.0-msys/Modules/Platform/MSYS-GNU-CXX.cmake
--- cmake-3.6.0/Modules/Platform/MSYS-GNU-CXX.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/Platform/MSYS-GNU-CXX.cmake	2014-04-06 23:00:30.585400000 +0400
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(CXX)
diff -Naur cmake-3.6.0/Modules/Platform/MSYS-GNU-Fortran.cmake cmake-3.6.0-msys/Modules/Platform/MSYS-GNU-Fortran.cmake
--- cmake-3.6.0/Modules/Platform/MSYS-GNU-Fortran.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/Platform/MSYS-GNU-Fortran.cmake	2014-04-06 23:01:19.366600000 +0400
@@ -0,0 +1,2 @@
+include(Platform/MSYS-GNU)
+__msys_compiler_gnu(Fortran)
diff -Naur cmake-3.6.0/Modules/Platform/MSYS-windres.cmake cmake-3.6.0-msys/Modules/Platform/MSYS-windres.cmake
--- cmake-3.6.0/Modules/Platform/MSYS-windres.cmake	1970-01-01 03:00:00.000000000 +0300
+++ cmake-3.6.0-msys/Modules/Platform/MSYS-windres.cmake	2013-07-02 17:41:40.000000000 +0400
@@ -0,0 +1 @@
+set(CMAKE_RC_COMPILE_OBJECT "<CMAKE_RC_COMPILER> -O coff <FLAGS> <DEFINES> <SOURCE> <OBJECT>")
diff -aur cmake-3.6.0/Modules/UseJava.cmake.orig cmake-3.6.0/Modules/UseJava.cmake
--- cmake-3.6.0/Modules/UseJava.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/UseJava.cmake	2016-05-22 13:22:34.013234600 -0400
@@ -460,7 +460,7 @@
         ${CMAKE_JAVA_LIBRARY_OUTPUT_PATH}
     )
 
-    if (CMAKE_HOST_WIN32 AND NOT CYGWIN AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
+    if (CMAKE_HOST_WIN32 AND NOT CYGWIN AND NOT MSYS AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
         set(CMAKE_JAVA_INCLUDE_FLAG_SEP ";")
     else ()
         set(CMAKE_JAVA_INCLUDE_FLAG_SEP ":")
@@ -1211,7 +1211,7 @@
     endif()
 
     set (_output_files)
-    if (WIN32 AND NOT CYGWIN AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
+    if (WIN32 AND NOT CYGWIN AND NOT MSYS AND CMAKE_HOST_SYSTEM_NAME MATCHES "Windows")
       set(_classpath_sep "$<SEMICOLON>")
     else ()
       set(_classpath_sep ":")
diff -aur cmake-3.6.0/Modules/UseSWIG.cmake.orig cmake-3.6.0/Modules/UseSWIG.cmake
--- cmake-3.6.0/Modules/UseSWIG.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Modules/UseSWIG.cmake	2016-05-22 13:22:34.020734600 -0400
@@ -271,7 +271,7 @@
     # Windows: .dll is no longer supported as a filename extension for extension modules.
     # .pyd is now the only filename extension that will be searched for.
     # </quote>
-    if(WIN32 AND NOT CYGWIN)
+    if(WIN32 AND NOT CYGWIN AND NOT MSYS)
       set_target_properties(${SWIG_MODULE_${name}_REAL_NAME} PROPERTIES SUFFIX ".pyd")
     endif()
   elseif ("${swig_lowercase_language}" STREQUAL "r")
diff -aur cmake-3.6.0/Source/CMakeInstallDestinations.cmake.orig cmake-3.6.0/Source/CMakeInstallDestinations.cmake > patch
--- cmake-3.6.0/Source/CMakeInstallDestinations.cmake.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Source/CMakeInstallDestinations.cmake	2016-05-22 13:22:34.027235500 -0400
@@ -4,7 +4,7 @@
   set(CMAKE_MAN_DIR_DEFAULT "documentation/man") # HAIKU
   set(CMAKE_DOC_DIR_DEFAULT "documentation/doc/cmake-${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}") # HAIKU
   set(CMAKE_XDGDATA_DIR_DEFAULT "share") # HAIKU
-elseif(CYGWIN)
+elseif(CYGWIN OR MSYS)
   set(CMAKE_DATA_DIR_DEFAULT "share/cmake-${CMake_VERSION}") # CYGWIN
   set(CMAKE_DOC_DIR_DEFAULT "share/doc/cmake-${CMake_VERSION}") # CYGWIN
   set(CMAKE_MAN_DIR_DEFAULT "share/man") # CYGWIN
diff -aur cmake-3.6.0/Source/CMakeLists.txt.orig cmake-3.6.0/Source/CMakeLists.txt > patch
--- cmake-3.6.0/Source/CMakeLists.txt.orig	2016-04-15 09:41:21.000000000 -0400
+++ cmake-3.6.0/Source/CMakeLists.txt	2016-05-22 13:22:34.035736800 -0400
@@ -533,7 +533,7 @@
   cmNinjaUtilityTargetGenerator.h
   )
 
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   set_source_files_properties(cmcldeps.cxx PROPERTIES COMPILE_DEFINITIONS _WIN32_WINNT=0x0501)
   add_executable(cmcldeps cmcldeps.cxx ${MANIFEST_FILE})
   target_link_libraries(cmcldeps CMakeLib)
@@ -676,7 +676,7 @@
   CPack/cmCPack7zGenerator.cxx
   )
 
-if(CYGWIN)
+if(CYGWIN OR MSYS)
   set(CPACK_SRCS ${CPACK_SRCS}
     CPack/cmCPackCygwinBinaryGenerator.cxx
     CPack/cmCPackCygwinSourceGenerator.cxx
diff -aur cmake-3.6.0/Source/cmInstallExportGenerator.cxx.orig cmake-3.6.0/Source/cmInstallExportGenerator.cxx > patch
--- cmake-3.6.0/Source/cmInstallExportGenerator.cxx.orig	2016-05-19 13:43:51.624375300 -0400
+++ cmake-3.6.0/Source/cmInstallExportGenerator.cxx	2016-05-19 13:44:40.934450400 -0400
@@ -79,7 +79,7 @@
 
   // Enforce a maximum length.
   bool useMD5 = false;
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
   std::string::size_type const max_total_len = 250;
 #else
   std::string::size_type const max_total_len = 1000;
diff -aur cmake-3.6.0/Source/cmGeneratorTarget.cxx.orig cmake-3.6.0/Source/cmGeneratorTarget.cxx
--- cmake-3.6.0/Source/cmGeneratorTarget.cxx.orig	2016-07-21 13:48:41.545471000 -0400
+++ cmake-3.6.0/Source/cmGeneratorTarget.cxx	2016-07-21 15:12:17.367146900 -0400
@@ -296,7 +296,7 @@
 
   this->DLLPlatform =
     (this->Makefile->IsOn("WIN32") || this->Makefile->IsOn("CYGWIN") ||
-     this->Makefile->IsOn("MINGW"));
+     this->Makefile->IsOn("MSYS") || this->Makefile->IsOn("MINGW"));
 
   this->PolicyMap = t->PolicyMap;
 }
@@ -2862,7 +2862,7 @@
 
 // This versioning is supported only for executables and then only
 // when the platform supports symbolic links.
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   const char* version = 0;
 #else
   // Check for executable version properties.
@@ -2883,7 +2883,7 @@
   name = prefix + base + suffix;
 
 // The executable's real name on disk.
-#if defined(__CYGWIN__)
+#if defined(__CYGWIN__) || defined(__MSYS__)
   realName = prefix + base;
 #else
   realName = name;
@@ -2892,7 +2892,7 @@
     realName += "-";
     realName += version;
   }
-#if defined(__CYGWIN__)
+#if defined(__CYGWIN__) || defined(__MSYS__)
   realName += suffix;
 #endif
 
diff -aur cmake-3.6.0/Source/cmInstallCommand.cxx.orig cmake-3.6.0/Source/cmInstallCommand.cxx
--- cmake-3.6.0/Source/cmInstallCommand.cxx.orig	2016-07-21 15:23:02.071561100 -0400
+++ cmake-3.6.0/Source/cmInstallCommand.cxx	2016-07-21 17:22:12.737273200 -0400
@@ -311,7 +311,7 @@
   // Check whether this is a DLL platform.
   bool dll_platform =
     (this->Makefile->IsOn("WIN32") || this->Makefile->IsOn("CYGWIN") ||
-     this->Makefile->IsOn("MINGW"));
+     this->Makefile->IsOn("MSYS") || this->Makefile->IsOn("MINGW"));
 
   for (std::vector<std::string>::const_iterator targetIt =
          targetList.GetVector().begin();
@@ -1011,7 +1011,7 @@
     } else if (doing == DoingRegex) {
       literal_args += " REGEX \"";
 // Match rules are case-insensitive on some platforms.
-#if defined(_WIN32) || defined(__APPLE__) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__APPLE__) || defined(__CYGWIN__) || defined(__MSYS__)
       std::string regex = cmSystemTools::LowerCase(args[i]);
 #else
       std::string regex = args[i];
diff -aur cmake-3.6.0/Source/cmake.cxx.orig cmake-3.6.0/Source/cmake.cxx
--- cmake-3.6.0/Source/cmake.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmake.cxx	2016-07-21 15:42:05.904860800 -0400
@@ -50,7 +50,7 @@
 #endif
 
 // include the generator
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 #if !defined(CMAKE_BOOT_MINGW)
 #include "cmGlobalBorlandMakefileGenerator.h"
 #include "cmGlobalGhsMultiGenerator.h"
@@ -806,7 +806,7 @@
 void cmake::AddDefaultExtraGenerators()
 {
 #if defined(CMAKE_BUILD_WITH_CMAKE)
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 // e.g. kdevelop4 ?
 #endif
 
@@ -1179,7 +1179,7 @@
       cmSystemTools::SetForceUnixPaths(
         this->GlobalGenerator->GetForceUnixPaths());
     } else {
-#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(CMAKE_BOOT_MINGW)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(CMAKE_BOOT_MINGW)
       std::string installedCompiler;
       // Try to find the newest VS installed on the computer and
       // use that as a default if -G is not specified
@@ -1519,7 +1519,7 @@
 
 void cmake::AddDefaultGenerators()
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 #if !defined(CMAKE_BOOT_MINGW)
   this->Generators.push_back(cmGlobalVisualStudio14Generator::NewFactory());
   this->Generators.push_back(cmGlobalVisualStudio12Generator::NewFactory());
@@ -2093,7 +2093,7 @@
   // solution.
   std::string stampDepends = stampName;
   stampDepends += ".depend";
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
   cmsys::ifstream fin(stampDepends.c_str(), std::ios::in | std::ios::binary);
 #else
   cmsys::ifstream fin(stampDepends.c_str(), std::ios::in);
diff -aur cmake-3.6.0/Source/cmGlobalVisualStudio14Generator.cxx.orig cmake-3.6.0/Source/cmGlobalVisualStudio14Generator.cxx
--- cmake-3.6.0/Source/cmGlobalVisualStudio14Generator.cxx.orig	2016-05-19 13:37:27.946889100 -0400
+++ cmake-3.6.0/Source/cmGlobalVisualStudio14Generator.cxx	2016-05-19 13:39:44.407502500 -0400
@@ -232,7 +232,7 @@
     win10SDK, cmSystemTools::KeyWOW64_32);
 }
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 struct NoWindowsH
 {
   bool operator()(std::string const& p)
@@ -245,7 +245,7 @@
 //----------------------------------------------------------------------------
 std::string cmGlobalVisualStudio14Generator::GetWindows10SDKVersion()
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   // This logic is taken from the vcvarsqueryregistry.bat file from VS2015
   // Try HKLM and then HKCU.
   std::string win10Root;
diff -Naur cmake-3.6.0/Source/cmLocalGenerator.cxx cmake-3.6.0-msys/Source/cmLocalGenerator.cxx
--- cmake-3.6.0/Source/cmLocalGenerator.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmLocalGenerator.cxx	2016-07-21 18:42:49.317234800 -0400
@@ -74,7 +74,7 @@
 void cmLocalGenerator::ComputeObjectMaxPath()
 {
 // Choose a maximum object file name length.
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
   this->ObjectPathMax = 250;
 #else
   this->ObjectPathMax = 1000;
@@ -228,7 +228,7 @@
 {
   // Compute the install prefix.
   const char* prefix = this->Makefile->GetDefinition("CMAKE_INSTALL_PREFIX");
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   std::string prefix_win32;
   if (!prefix) {
     if (!cmSystemTools::GetEnv("SystemDrive", prefix_win32)) {
@@ -1276,7 +1276,7 @@
 std::string cmLocalGenerator::ConvertToLinkReference(std::string const& lib,
                                                      OutputFormat format)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   // Work-ardound command line parsing limitations in MSVC 6.0
   if (this->Makefile->IsOn("MSVC60")) {
     // Search for the last space.
@@ -2204,7 +2204,7 @@
           g.Generate(os, config, configurationTypes);
         } break;
         case cmState::SHARED_LIBRARY: {
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
           // Special code to handle DLL.  Install the import library
           // to the normal destination and the DLL to the runtime
           // destination.
diff -aur cmake-3.6.0/Source/cmGlobalGenerator.cxx.orig cmake-3.6.0/Source/cmGlobalGenerator.cxx
--- cmake-3.6.0/Source/cmGlobalGenerator.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmGlobalGenerator.cxx	2016-07-21 18:27:32.157778800 -0400
@@ -9,7 +9,7 @@
   implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
   See the License for more information.
 ============================================================================*/
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 #include "windows.h" // this must be first to define GetCurrentDirectory
 #if defined(_MSC_VER) && _MSC_VER >= 1800
 #define KWSYS_WINDOWS_DEPRECATED_GetVersionEx
@@ -432,7 +432,7 @@
   //  Load the CMakeDetermineSystem.cmake file and find out
   // what platform we are running on
   if (!mf->GetDefinition("CMAKE_SYSTEM")) {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
     /* Windows version number data.  */
     OSVERSIONINFOEXW osviex;
     ZeroMemory(&osviex, sizeof(osviex));
@@ -1627,7 +1627,7 @@
   if (!target.empty()) {
     newTarget += target;
 #if 0
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
     std::string tmp = target;
     // if the target does not already end in . something
     // then assume .exe
@@ -2568,7 +2568,7 @@
 void cmGlobalGenerator::CheckRuleHashes(std::string const& pfile,
                                         std::string const& home)
 {
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
   cmsys::ifstream fin(pfile.c_str(), std::ios::in | std::ios::binary);
 #else
   cmsys::ifstream fin(pfile.c_str(), std::ios::in);
diff -Naur cmake-3.6.0/Source/cmTarget.cxx.orig cmake-3.6.0/Source/cmTarget.cxx
--- cmake-3.6.0/Source/cmTarget.cxx.orig	2016-07-21 18:54:13.725691500 -0400
+++ cmake-3.6.0/Source/cmTarget.cxx	2016-07-21 19:14:05.995463800 -0400
@@ -83,7 +83,7 @@
   // Check whether this is a DLL platform.
   this->DLLPlatform =
     (this->Makefile->IsOn("WIN32") || this->Makefile->IsOn("CYGWIN") ||
-     this->Makefile->IsOn("MINGW"));
+     this->Makefile->IsOn("MSYS") || this->Makefile->IsOn("MINGW"));
 
   // Check whether we are targeting an Android platform.
   this->IsAndroid =
diff -aur cmake-3.6.0/Source/cmcmd.cxx.orig cmake-3.6.0/Source/cmcmd.cxx > patch
--- cmake-3.6.0/Source/cmcmd.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmcmd.cxx	2016-07-21 19:55:47.256615300 -0400
@@ -87,7 +87,7 @@
     << "  time command [args...]    - run command and return elapsed time\n"
     << "  touch file                - touch a file.\n"
     << "  touch_nocreate file       - touch a file but do not create it.\n"
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
     << "Available on Windows only:\n"
     << "  delete_regv key           - delete registry value\n"
     << "  env_vs8_wince sdkname     - displays a batch file which sets the "
@@ -887,7 +887,7 @@
     }
 #endif
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
     // Write registry value
     else if (args[1] == "write_regv" && args.size() > 3) {
       return cmSystemTools::WriteRegistryValue(args[2].c_str(),
@@ -957,7 +957,7 @@
       cmSystemTools::FileIsSymlink(link)) {
     cmSystemTools::RemoveFile(link);
   }
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   return cmSystemTools::CopyFileAlways(file.c_str(), link.c_str());
 #else
   std::string linktext = cmSystemTools::GetFilenameName(file);
diff -aur cmake-3.6.0/Source/cmStandardLexer.h.orig cmake-3.6.0/Source/cmStandardLexer.h
--- cmake-3.6.0/Source/cmStandardLexer.h.orig	2016-07-21 20:27:26.798882500 -0400
+++ cmake-3.6.0/Source/cmStandardLexer.h	2016-07-21 20:48:37.504781600 -0400
@@ -26,7 +26,7 @@
 #endif
 
 /* Define isatty on windows.  */
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 #include <io.h>
 #if defined(_MSC_VER)
 #define isatty _isatty
diff -aur cmake-3.6.0/Source/kwsys/Configure.h.in.orig cmake-3.6.0/Source/kwsys/Configure.h.in
--- cmake-3.6.0/Source/kwsys/Configure.h.in.orig	2016-07-22 16:39:22.101700900 -0400
+++ cmake-3.6.0/Source/kwsys/Configure.h.in	2016-07-22 16:39:54.240728700 -0400
@@ -79,7 +79,7 @@
 
 /* Setup the export macro.  */
 #if @KWSYS_BUILD_SHARED@
-# if defined(_WIN32) || defined(__CYGWIN__)
+# if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
 #  if defined(@KWSYS_NAMESPACE@_EXPORTS)
 #   define @KWSYS_NAMESPACE@_EXPORT __declspec(dllexport)
 #  else
diff -aur cmake-3.6.0/Source/kwsys/Glob.cxx.orig cmake-3.6.0/Source/kwsys/Glob.cxx
--- cmake-3.6.0/Source/kwsys/Glob.cxx.orig	2016-05-19 15:13:59.302081400 -0400
+++ cmake-3.6.0/Source/kwsys/Glob.cxx	2016-05-19 15:15:26.306288200 -0400
@@ -42,7 +42,7 @@
 # define KWSYS_GLOB_CASE_INDEPENDENT
 #endif
 
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
 // Handle network paths
 # define KWSYS_GLOB_SUPPORT_NETWORK_PATHS
 #endif
diff -aur cmake-3.5.2/Source/kwsys/Glob.cxx.orig cmake-3.5.2/Source/kwsys/Glob.cxx > patch
--- cmake-3.5.2/Source/kwsys/Glob.cxx.orig      2016-05-22 16:38:04.789536600 -0400
+++ cmake-3.5.2/Source/kwsys/Glob.cxx   2016-05-22 16:38:04.817040300 -0400
@@ -37,7 +37,7 @@
 #include <string.h>
 namespace KWSYS_NAMESPACE
 {
-#if defined(_WIN32) || defined(__APPLE__) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__APPLE__)
 // On Windows and apple, no difference between lower and upper case
 # define KWSYS_GLOB_CASE_INDEPENDENT
 #endif

diff -aur cmake-3.6.0/Source/kwsys/Process.h.in.orig cmake-3.6.0/Source/kwsys/Process.h.in
--- cmake-3.6.0/Source/kwsys/Process.h.in.orig	2016-07-22 17:04:57.109679000 -0400
+++ cmake-3.6.0/Source/kwsys/Process.h.in	2016-07-22 17:05:37.756598900 -0400
@@ -91,7 +91,7 @@
 typedef struct kwsysProcess_s kwsysProcess;
 
 /* Platform-specific pipe handle type.  */
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 typedef void* kwsysProcess_Pipe_Handle;
 #else
 typedef int kwsysProcess_Pipe_Handle;
diff -aur cmake-3.6.0/Source/kwsys/SharedForward.h.in.orig cmake-3.6.0/Source/kwsys/SharedForward.h.in
--- cmake-3.6.0/Source/kwsys/SharedForward.h.in.orig	2016-07-22 17:09:19.326720200 -0400
+++ cmake-3.6.0/Source/kwsys/SharedForward.h.in	2016-07-22 17:15:39.588654000 -0400
@@ -167,7 +167,7 @@
 #include <errno.h>
 #include <stdio.h>
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 # include <io.h>
 # include <windows.h>
 # include <process.h>
@@ -181,7 +181,7 @@
 /* Configuration for this platform.  */
 
 /* The path separator for this platform.  */
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 # define KWSYS_SHARED_FORWARD_PATH_SEP ';'
 # define KWSYS_SHARED_FORWARD_PATH_SLASH '\\'
 #else
@@ -268,7 +268,7 @@
 # endif
 
 /* Cygwin */
-#elif defined(__CYGWIN__)
+#elif defined(__CYGWIN__) || defined(__MSYS__)
 # define KWSYS_SHARED_FORWARD_LDD "cygcheck" /* TODO: cygwin 1.7 has ldd */
 # define KWSYS_SHARED_FORWARD_LDD_N 1
 # define KWSYS_SHARED_FORWARD_LDPATH "PATH"
diff -aur cmake-3.6.0/Source/kwsys/SystemTools.hxx.in.orig cmake-3.6.0/Source/kwsys/SystemTools.hxx.in
--- cmake-3.6.0/Source/kwsys/SystemTools.hxx.in.orig	2016-07-22 17:20:57.981138200 -0400
+++ cmake-3.6.0/Source/kwsys/SystemTools.hxx.in	2016-07-22 17:22:41.717010100 -0400
@@ -22,7 +22,7 @@
 #include <@KWSYS_NAMESPACE@/String.hxx>
 
 #include <sys/types.h>
-#if !defined(_WIN32) || defined(__CYGWIN__)
+#if !defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
 # include <unistd.h> // For access permissions for use with access()
 #endif
 
@@ -74,7 +74,7 @@
 // system in the future needs a special type.  These are flags that may be
 // combined using the | operator.
 typedef int TestFilePermissions;
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   // On Windows (VC and Borland), no system header defines these constants...
   static const TestFilePermissions TEST_FILE_OK = 0;
   static const TestFilePermissions TEST_FILE_READ = 4;
diff -aur cmake-3.6.0/Source/cmFindProgramCommand.cxx.orig cmake-3.6.0/Source/cmFindProgramCommand.cxx
--- cmake-3.6.0/Source/cmFindProgramCommand.cxx.orig	2016-07-21 20:27:26.814507200 -0400
+++ cmake-3.6.0/Source/cmFindProgramCommand.cxx	2016-07-21 20:52:51.027046800 -0400
@@ -21,7 +21,7 @@
 {
   cmFindProgramHelper()
   {
-#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MINGW32__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__) || defined(__MINGW32__)
     // Consider platform-specific extensions.
     this->Extensions.push_back(".com");
     this->Extensions.push_back(".exe");
diff -aur cmake-3.6.0/Source/cmFileCommand.cxx.orig cmake-3.6.0/Source/cmFileCommand.cxx
--- cmake-3.6.0/Source/cmFileCommand.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmFileCommand.cxx	2016-07-22 08:01:27.471611900 -0400
@@ -42,7 +42,7 @@
 #include <cmsys/auto_ptr.hxx>
 
 // Table of permissions flags.
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 static mode_t mode_owner_read = S_IREAD;
 static mode_t mode_owner_write = S_IWRITE;
 static mode_t mode_owner_execute = S_IEXEC;
@@ -252,7 +252,7 @@
   std::string variable = resultArg.GetString();
 
 // Open the specified file.
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
   cmsys::ifstream file(
     fileName.c_str(), std::ios::in |
       (hexOutputArg.IsEnabled() ? std::ios::binary : std::ios::in));
@@ -523,7 +523,7 @@
   }
 
 // Open the specified file.
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
   cmsys::ifstream fin(fileName.c_str(), std::ios::in | std::ios::binary);
 #else
   cmsys::ifstream fin(fileName.c_str(), std::ios::in);
@@ -1013,7 +1013,7 @@
   MatchProperties CollectMatchProperties(const char* file)
   {
 // Match rules are case-insensitive on some platforms.
-#if defined(_WIN32) || defined(__APPLE__) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__APPLE__) || defined(__CYGWIN__) || defined(__MSYS__)
     std::string lower = cmSystemTools::LowerCase(file);
     const char* file_to_match = lower.c_str();
 #else
@@ -2251,7 +2251,7 @@
     return false;
   }
   i++; // Get rid of subcommand
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   char pathSep = ';';
 #else
   char pathSep = ':';
diff -aur cmake-3.6.0/Source/cmExecProgramCommand.cxx.orig cmake-3.6.0/Source/cmExecProgramCommand.cxx
--- cmake-3.6.0/Source/cmExecProgramCommand.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmExecProgramCommand.cxx	2016-07-21 21:07:28.170898400 -0400
@@ -127,7 +127,7 @@
     verbose = false;
   }
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   // if the command does not start with a quote, then
   // try to find the program, and if the program can not be
   // found use system to run the command as it must be a built in
@@ -178,7 +178,7 @@
     return false;
   }
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   if (dir) {
     cmsysProcess_SetWorkingDirectory(cp, dir);
   }
@@ -253,7 +253,7 @@
       break;
   }
   if (!msg.empty()) {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
     // Old Windows process execution printed this info.
     msg += "\n\nfor command: ";
     msg += command;
diff -aur cmake-3.6.0/Source/cmExportCommand.cxx.orig cmake-3.6.0/Source/cmExportCommand.cxx
--- cmake-3.6.0/Source/cmExportCommand.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmExportCommand.cxx	2016-07-21 21:11:42.234820500 -0400
@@ -256,7 +256,7 @@
   // unique with high probability.
   const char* outDir = this->Makefile->GetCurrentBinaryDirectory();
   std::string hash = cmSystemTools::ComputeStringMD5(outDir);
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   this->StorePackageRegistryWin(package, outDir, hash.c_str());
 #else
   this->StorePackageRegistryDir(package, outDir, hash.c_str());
@@ -265,7 +265,7 @@
   return true;
 }
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 #include <windows.h>
 #undef GetCurrentDirectory
 void cmExportCommand::ReportRegistryError(std::string const& msg,
diff -aur cmake-3.6.0/Source/cmDependsFortran.cxx.orig cmake-3.6.0/Source/cmDependsFortran.cxx
--- cmake-3.6.0/Source/cmDependsFortran.cxx.orig	2016-05-19 16:10:26.702949800 -0400
+++ cmake-3.6.0/Source/cmDependsFortran.cxx	2016-05-19 16:14:31.822362400 -0400
@@ -727,7 +727,7 @@
     return cmSystemTools::FilesDiffer(modFile, stampFile);
     }
 
-#if defined(_WIN32) || defined(__CYGWIN__)
+#if defined(_WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
   cmsys::ifstream finModFile(modFile, std::ios::in | std::ios::binary);
   cmsys::ifstream finStampFile(stampFile, std::ios::in | std::ios::binary);
 #else
diff -aur cmake-3.6.0/Source/cmFindPackageCommand.cxx.orig cmake-3.6.0/Source/cmFindPackageCommand.cxx
--- cmake-3.6.0/Source/cmFindPackageCommand.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmFindPackageCommand.cxx	2016-07-21 21:28:24.577459000 -0400
@@ -1053,7 +1053,7 @@
 
 void cmFindPackageCommand::FillPrefixesUserRegistry()
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   this->LoadPackageRegistryWinUser();
 #elif defined(__HAIKU__)
   char dir[B_PATH_NAME_LENGTH];
@@ -1082,12 +1082,12 @@
     return;
   }
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   this->LoadPackageRegistryWinSystem();
 #endif
 }
 
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 #include <windows.h>
 #undef GetCurrentDirectory
 // http://msdn.microsoft.com/en-us/library/aa384253%28v=vs.85%29.aspx
diff -aur cmake-3.6.0/Source/cmCustomCommandGenerator.cxx.orig cmake-3.6.0/Source/cmCustomCommandGenerator.cxx
--- cmake-3.6.0/Source/cmCustomCommandGenerator.cxx.orig	2016-05-19 10:41:41.091630600 -0400
+++ cmake-3.6.0/Source/cmCustomCommandGenerator.cxx	2016-05-19 10:42:51.426005500 -0400
@@ -57,7 +57,7 @@
 std::string escapeForShellOldStyle(const std::string& str)
 {
   std::string result;
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   // if there are spaces
   std::string temp = str;
   if (temp.find(" ") != std::string::npos &&
diff -aur cmake-3.6.0/Source/cmComputeLinkInformation.cxx.orig cmake-3.6.0/Source/cmComputeLinkInformation.cxx
--- cmake-3.6.0/Source/cmComputeLinkInformation.cxx.orig	2016-05-19 10:36:17.718337900 -0400
+++ cmake-3.6.0/Source/cmComputeLinkInformation.cxx	2016-05-19 10:39:25.038596800 -0400
@@ -1001,7 +1001,7 @@
 
     // Store this extension choice with the "." escaped.
     libext += "\\";
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
     libext += this->NoCaseExpression(i->c_str());
 #else
     libext += *i;
diff -aur cmake-3.6.0/Source/cmSystemTools.cxx.orig cmake-3.6.0/Source/cmSystemTools.cxx
--- cmake-3.6.0/Source/cmSystemTools.cxx.orig	2016-07-07 10:47:27.000000000 -0400
+++ cmake-3.6.0/Source/cmSystemTools.cxx	2016-07-22 06:58:47.822888300 -0400
@@ -80,7 +80,7 @@
 class cmSystemToolsFileTime
 {
 public:
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   FILETIME timeCreation;
   FILETIME timeLastAccess;
   FILETIME timeLastWrite;
@@ -163,7 +163,7 @@
 
 // replace replace with with as many times as it shows up in source.
 // write the result into source.
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 void cmSystemTools::ExpandRegistryValues(std::string& source, KeyWOW64 view)
 {
   // Regular expression to match anything inside [...] that begins in HKEY.
@@ -1176,7 +1176,7 @@
 
 std::string cmSystemTools::ConvertToOutputPath(const char* path)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   if (s_ForceUnixPaths) {
     return cmSystemTools::ConvertToUnixOutputPath(path);
   }
@@ -1188,7 +1188,7 @@
 
 void cmSystemTools::ConvertToOutputSlashes(std::string& path)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   if (!s_ForceUnixPaths) {
     // Convert to windows slashes.
     std::string::size_type pos = 0;
@@ -1203,7 +1203,7 @@
 
 std::string cmSystemTools::ConvertToRunCommandPath(const char* path)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   return cmSystemTools::ConvertToWindowsOutputPath(path);
 #else
   return cmSystemTools::ConvertToUnixOutputPath(path);
@@ -1476,7 +1476,7 @@
   /* Format the time using 'ls -l' conventions. */
   tim = archive_entry_mtime(entry);
 #define HALF_YEAR (time_t)365 * 86400 / 2
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
 /* Windows' strftime function does not support %e format. */
 #define DAY_FMT "%d"
 #else
@@ -1740,7 +1740,7 @@
 
 bool cmSystemTools::CopyFileTime(const char* fromFile, const char* toFile)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   cmSystemToolsWindowsHandle hFrom = CreateFileW(
     SystemTools::ConvertToWindowsExtendedPath(fromFile).c_str(), GENERIC_READ,
     FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0);
@@ -1787,7 +1787,7 @@
 
 bool cmSystemTools::FileTimeGet(const char* fname, cmSystemToolsFileTime* t)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   cmSystemToolsWindowsHandle h = CreateFileW(
     SystemTools::ConvertToWindowsExtendedPath(fname).c_str(), GENERIC_READ,
     FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0);
@@ -1811,7 +1811,7 @@
 
 bool cmSystemTools::FileTimeSet(const char* fname, cmSystemToolsFileTime* t)
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   cmSystemToolsWindowsHandle h = CreateFileW(
     SystemTools::ConvertToWindowsExtendedPath(fname).c_str(),
     FILE_WRITE_ATTRIBUTES, 0, 0, OPEN_EXISTING, FILE_FLAG_BACKUP_SEMANTICS, 0);
@@ -1849,7 +1849,7 @@
 
 unsigned int cmSystemTools::RandomSeed()
 {
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   unsigned int seed = 0;
 
   // Try using a real random source.
@@ -1902,7 +1902,7 @@
 void cmSystemTools::FindCMakeResources(const char* argv0)
 {
   std::string exe_dir;
-#if defined(_WIN32) && !defined(__CYGWIN__)
+#if defined(_WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__)
   (void)argv0; // ignore this on windows
   wchar_t modulepath[_MAX_PATH];
   ::GetModuleFileNameW(NULL, modulepath, sizeof(modulepath));
diff -Naur cmake-3.6.0/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt cmake-3.6.0-msys/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt
--- cmake-3.6.0/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt	2013-07-02 17:41:40.000000000 +0400
+++ cmake-3.6.0-msys/Tests/CMakeOnly/CheckCXXCompilerFlag/CMakeLists.txt	2014-04-06 23:20:04.176400000 +0400
@@ -36,7 +36,7 @@
   string (REGEX REPLACE ".*Version ([0-9]+(\\.[0-9]+)+).*" "\\1" _intel_version "${_intel_version_info}")
 endif()
 
-message("Platform:\n  WIN32: ${WIN32}\n  UNIX: ${UNIX}\n  APPLE: ${APPLE}\n  MINGW: ${MINGW}\n  CYGWIN: ${CYGWIN}\n"
+message("Platform:\n  WIN32: ${WIN32}\n  UNIX: ${UNIX}\n  APPLE: ${APPLE}\n  MINGW: ${MINGW}\n  CYGWIN: ${CYGWIN}\n  MSYS: ${MSYS}\n"
   "  MSVC: ${MSVC}\n  MSVC60: ${MSVC60}\n  MSVC70: ${MSVC70}\n  MSVC71: ${MSVC71}\n  MSVC80: ${MSVC80}\n  MSVC90: ${MSVC90}\n  MSVC10: ${MSVC10}\n"
   "  GCC: ${_gcc_version}\n"
   "  Clang: ${_clang_version}\n"
diff -aur cmake-3.6.0/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in.orig cmake-3.6.0/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in
--- cmake-3.6.0/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in.orig	2016-04-15 09:41:23.000000000 -0400
+++ cmake-3.6.0/Tests/CMakeTests/ImplicitLinkInfoTest.cmake.in	2016-05-22 14:38:41.681197500 -0400
@@ -495,23 +495,24 @@
 # MSYS
 
 # gcc dummy.c -v
-set(msys_gcc_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/cckQmvRt.o -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_gcc_libs "mingw32;moldname;mingwex;msvcrt;user32;kernel32;advapi32;shell32;mingw32;moldname;mingwex;msvcrt")
-set(msys_gcc_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(cygwin_gcc_text " /usr/lib/gcc/i686-pc-msys/4.9.2/collect2.exe -Bdynamic --dll-search-prefix=msys- /usr/lib/gcc/i686-pc-msys/4.9.2/../../../crt0.o -L/usr/lib/gcc/i686-pc-msys/4.8.2 -L/usr/lib/gcc/i686-pc-msys/4.9.2 -L/usr/lib/gcc/i686-pc-msys/4.8.2/../../.. /home/user/AppData/Local/Temp/cczg1Arh.o -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc")
+set(cygwin_gcc_libs "msys;user32;kernel32;advapi32;shell32")
+set(cygwin_gcc_dirs "/usr/lib/gcc/i686-pc-msys/4.9.2;/usr/lib")
 list(APPEND platforms msys_gcc)
 
 # g++ dummy.cxx -v
-set(msys_g++_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/cci5hYPk.o -lstdc++ -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_g++_libs "stdc++;mingw32;moldname;mingwex;msvcrt;user32;kernel32;advapi32;shell32;mingw32;moldname;mingwex;msvcrt")
-set(msys_g++_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
+set(msys_g++_text " /usr/lib/gcc/i686-pc-msys/4.9.2/collect2.exe -Bdynamic --dll-search-prefix=msys- /usr/lib/gcc/i686-pc-msys/4.8.2/../../../crt0.o -L/usr/lib/gcc/i686-pc-msys/4.9.2 -L/usr/lib/gcc/i686-pc-msys/4.9.2 -L/usr/lib/gcc/i686-pc-msys/4.9.2/../../.. /home/user/AppData/Local/Temp/ccsvcDO6.o -lstdc++ -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc")
+set(msys_g++_libs "stdc++;msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_g++_dirs "/usr/lib/gcc/i686-pc-msys/4.9.2;/usr/lib")
 list(APPEND platforms msys_g++)
 
-# g77 dummy.f -v
-set(msys_g77_text " C:/some-mingw/bin/../libexec/gcc/mingw32/3.4.5/collect2.exe -Bdynamic /some-mingw/lib/crt2.o C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtbegin.o -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5 -LC:/some-mingw/bin/../lib/gcc -L/some-mingw/lib -LC:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/../../.. C:/home/user/AppData/Local/Temp/ccabRxQ1.o -lfrtbegin -lg2c -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt -luser32 -lkernel32 -ladvapi32 -lshell32 -lmingw32 -lgcc -lmoldname -lmingwex -lmsvcrt C:/some-mingw/bin/../lib/gcc/mingw32/3.4.5/crtend.o")
-set(msys_g77_libs "frtbegin;g2c;mingw32;moldname;mingwex;msvcrt;user32;kernel32;advapi32;shell32;mingw32;moldname;mingwex;msvcrt")
-set(msys_g77_dirs "C:/some-mingw/lib/gcc/mingw32/3.4.5;C:/some-mingw/lib/gcc;/some-mingw/lib;C:/some-mingw/lib")
-list(APPEND platforms msys_g77)
-
+# gfortran dummy.f -v
+set(msys_gfortran_text "Configured with: ... LD=/opt/gcc-tools/bin/ld.exe
+ /usr/lib/gcc/i686-pc-msys/4.9.2/collect2.exe -Bdynamic --dll-search-prefix=msys- -u ___register_frame_info -u ___deregister_frame_info /usr/lib/gcc/i686-pc-msys/4.9.2/../../../crt0.o /usr/lib/gcc/i686-pc-msys/4.9.2/crtbegin.o -L/usr/lib/gcc/i686-pc-msys/4.9.2 -L/usr/lib/gcc/i686-pc-msys/4.8.2 -L/usr/lib/gcc/i686-pc-msys/4.9.2/../../.. /home/user/AppData/Local/Temp/ccqRWKWg.o -lgfortranbegin -lgfortran -lgcc_s -lgcc_s -lgcc -lmsys-2.0 -luser32 -lkernel32 -ladvapi32 -lshell32 -lgcc_s -lgcc_s -lgcc /usr/lib/gcc/i686-pc-msys/4.9.2/crtend.o
+")
+set(msys_gfortran_libs "gfortranbegin;gfortran;msys-2.0;user32;kernel32;advapi32;shell32")
+set(msys_gfortran_dirs "/usr/lib/gcc/i686-pc-msys/4.9.2;/usr/lib")
+list(APPEND platforms msys_gfortran)
 
 #-----------------------------------------------------------------------------
 # Test parsing for all above examples.
diff -Naur cmake-3.6.0/Tests/Complex/Library/CMakeLists.txt cmake-3.6.0-msys/Tests/Complex/Library/CMakeLists.txt
--- cmake-3.6.0/Tests/Complex/Library/CMakeLists.txt	2013-07-02 17:41:40.000000000 +0400
+++ cmake-3.6.0-msys/Tests/Complex/Library/CMakeLists.txt	2014-04-06 23:29:57.163600000 +0400
@@ -24,7 +24,7 @@
 add_library(CMakeTestLibrary ${LibrarySources})
 
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(NOT BORLAND)
       if(NOT MINGW)
         target_link_libraries(CMakeTestLibrary
diff -Naur cmake-3.6.0/Tests/ComplexOneConfig/Library/CMakeLists.txt cmake-3.6.0-msys/Tests/ComplexOneConfig/Library/CMakeLists.txt
--- cmake-3.6.0/Tests/ComplexOneConfig/Library/CMakeLists.txt	2013-07-02 17:41:40.000000000 +0400
+++ cmake-3.6.0-msys/Tests/ComplexOneConfig/Library/CMakeLists.txt	2014-04-06 23:32:18.452800000 +0400
@@ -24,7 +24,7 @@
 add_library(CMakeTestLibrary ${LibrarySources})
 
 if(WIN32)
-  if(NOT CYGWIN)
+  if(NOT CYGWIN AND NOT MSYS)
     if(NOT BORLAND)
       if(NOT MINGW)
         target_link_libraries(CMakeTestLibrary
diff -aur cmake-3.6.0/Tests/ExternalProject/CMakeLists.txt.orig cmake-3.6.0/Tests/ExternalProject/CMakeLists.txt
--- cmake-3.6.0/Tests/ExternalProject/CMakeLists.txt.orig	2016-04-15 09:41:24.000000000 -0400
+++ cmake-3.6.0/Tests/ExternalProject/CMakeLists.txt	2016-05-22 14:43:01.879520400 -0400
@@ -100,7 +100,7 @@
 endif()
 
 if(do_cvs_tests AND NOT UNIX)
-  if("${CVS_EXECUTABLE}" MATCHES "cygwin")
+  if("${CVS_EXECUTABLE}" MATCHES "cygwin" OR "${CVS_EXECUTABLE}" MATCHES "MSYS")
     message(STATUS "No ExternalProject cvs tests with cygwin cvs.exe outside cygwin!")
     set(do_cvs_tests 0)
   endif()
diff -Naur cmake-3.6.0/Tests/FindPackageTest/CMakeLists.txt cmake-3.6.0-msys/Tests/FindPackageTest/CMakeLists.txt
--- cmake-3.6.0/Tests/FindPackageTest/CMakeLists.txt.orig	2016-04-15 09:41:24.000000000 -0400
+++ cmake-3.6.0/Tests/FindPackageTest/CMakeLists.txt	2016-05-22 14:43:01.886520300 -0400
@@ -65,7 +65,7 @@
 #-----------------------------------------------------------------------------
 # Test system package registry if possible.
 set(CMakeTestSystemPackage "")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   # Try writing a value to the system package registry.
   set(_data "${FindPackageTest_SOURCE_DIR}/SystemPackage")
   set(_key "HKLM\\Software\\Kitware\\CMake\\Packages\\CMakeTestSystemPackage")
diff -aur cmake-3.6.0/Tests/Fortran/CMakeLists.txt.orig cmake-3.6.0/Tests/Fortran/CMakeLists.txt 
--- cmake-3.6.0/Tests/Fortran/CMakeLists.txt.orig	2016-04-15 09:41:24.000000000 -0400
+++ cmake-3.6.0/Tests/Fortran/CMakeLists.txt	2016-05-22 14:43:01.892522100 -0400
@@ -28,7 +28,7 @@
 
 # Pick a module .def file with the properly mangled symbol name.
 set(world_def "")
-if(WIN32 AND NOT CYGWIN)
+if(WIN32 AND NOT CYGWIN AND NOT MSYS)
   if(CMAKE_Fortran_COMPILER_ID MATCHES "GNU")
     set(world_def world_gnu.def)
   elseif(CMAKE_Fortran_COMPILER_ID MATCHES "Intel" OR
diff -Naur cmake-3.6.0/Tests/Jump/Library/Shared/CMakeLists.txt cmake-3.6.0-msys/Tests/Jump/Library/Shared/CMakeLists.txt
--- cmake-3.6.0/Tests/Jump/Library/Shared/CMakeLists.txt	2013-07-02 17:41:40.000000000 +0400
+++ cmake-3.6.0-msys/Tests/Jump/Library/Shared/CMakeLists.txt	2014-04-06 23:35:00.505600000 +0400
@@ -1,6 +1,6 @@
 add_library(jumpShared SHARED jumpShared.cxx)
 
-if(WIN32 OR CYGWIN)
+if(WIN32 OR CYGWIN OR MSYS)
   set(SHARED_MUST_BE_IN_EXE_DIR 1)
 endif()
 
diff -Naur cmake-3.6.0/Tests/Module/GenerateExportHeader/CMakeLists.txt cmake-3.6.0-msys/Tests/Module/GenerateExportHeader/CMakeLists.txt
--- cmake-3.6.0/Tests/Module/GenerateExportHeader/CMakeLists.txt.orig	2016-07-22 06:46:51.610989200 -0400
+++ cmake-3.6.0/Tests/Module/GenerateExportHeader/CMakeLists.txt	2016-07-22 06:50:47.428956700 -0400
@@ -113,13 +113,13 @@
 add_executable(GenerateExportHeader exportheader_test.cpp)
 
 target_link_libraries(GenerateExportHeader ${link_libraries})
-if (WIN32 OR CYGWIN)
+if (WIN32 OR CYGWIN OR MSYS)
   if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" AND
     CMAKE_CXX_SIMULATE_ID STREQUAL "MSVC")
     set(_platform Win32-Clang)
   elseif(MSVC AND COMPILER_HAS_DEPRECATED)
     set(_platform Win32)
-  elseif((MINGW OR CYGWIN) AND COMPILER_HAS_DEPRECATED)
+  elseif((MINGW OR CYGWIN OR MSYS) AND COMPILER_HAS_DEPRECATED)
     set(_platform MinGW)
   else()
     set(_platform WinEmpty)
diff -Naur cmake-3.6.0/Tests/PerConfig/CMakeLists.txt cmake-3.6.0-msys/Tests/PerConfig/CMakeLists.txt
--- cmake-3.6.0/Tests/PerConfig/CMakeLists.txt	2013-07-02 17:41:40.000000000 +0400
+++ cmake-3.6.0-msys/Tests/PerConfig/CMakeLists.txt	2014-04-06 23:35:16.480000000 +0400
@@ -9,7 +9,7 @@
 set_property(TARGET pcShared PROPERTY DEBUG_POSTFIX -dbg)
 set_property(TARGET pcShared PROPERTY VERSION 1.2)
 set_property(TARGET pcShared PROPERTY SOVERSION 3)
-if(UNIX AND NOT CYGWIN)
+if(UNIX AND NOT CYGWIN AND NOT MSYS)
   set(soname_file -DpcShared_soname_file=$<TARGET_SONAME_FILE:pcShared>)
 endif()
 add_executable(perconfig perconfig.c)
diff -aur cmake-3.6.0/Tests/RunCMake/file/RunCMakeTest.cmake.orig cmake-3.6.0/Tests/RunCMake/file/RunCMakeTest.cmake
--- cmake-3.6.0/Tests/RunCMake/file/RunCMakeTest.cmake.orig	2016-04-15 09:41:27.000000000 -0400
+++ cmake-3.6.0/Tests/RunCMake/file/RunCMakeTest.cmake	2016-05-22 14:43:01.916024900 -0400
@@ -24,6 +24,6 @@
 # test is valid both for GLOB and GLOB_RECURSE
 run_cmake(GLOB-error-LIST_DIRECTORIES-no-arg)
 
-if(NOT WIN32 OR CYGWIN)
+if(NOT WIN32 OR CYGWIN OR MSYS)
   run_cmake(GLOB_RECURSE-cyclic-recursion)
 endif()
diff -Naur cmake-3.6.0/Tests/RunCMake/find_program/RunCMakeTest.cmake cmake-3.6.0-msys/Tests/RunCMake/find_program/RunCMakeTest.cmake
--- cmake-3.6.0/Tests/RunCMake/find_program/RunCMakeTest.cmake        2016-04-15 15:41:22.000000000 +0200
+++ cmake-3.6.0-msys/Tests/RunCMake/find_program/RunCMakeTest.cmake     2016-04-30 22:27:06.004149300 +0200
@@ -4,7 +4,7 @@
 run_cmake(DirsPerName)
 run_cmake(NamesPerDir)
 
-if(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN)$")
+if(CMAKE_SYSTEM_NAME MATCHES "^(Windows|CYGWIN|MSYS)$")
   run_cmake(WindowsCom)
   run_cmake(WindowsExe)
 endif()
diff -Naur cmake-3.6.0/Tests/SimpleInstall/CMakeLists.txt cmake-3.6.0-msys/Tests/SimpleInstall/CMakeLists.txt
--- cmake-3.6.0/Tests/SimpleInstall/CMakeLists.txt	2013-07-02 17:41:40.000000000 +0400
+++ cmake-3.6.0-msys/Tests/SimpleInstall/CMakeLists.txt	2014-04-06 23:35:50.971600000 +0400
@@ -44,7 +44,7 @@
     message(SEND_ERROR "Stage 1 did not run install script 2.")
   endif()
 
-  if(CYGWIN OR MINGW)
+  if(CYGWIN OR MSYS OR MINGW)
     set(LIBPATHS ${LIBPATHS} "${CMAKE_INSTALL_PREFIX}/MyTest/bin")
   endif()
   message("Search for library in: ${LIBPATHS}")
@@ -110,7 +110,7 @@
   endif()
 
   # Check that scripts properly installed.
-  if(WIN32 AND NOT CYGWIN)
+  if(WIN32 AND NOT CYGWIN AND NOT MSYS)
     set(BAT .bat)
   else()
     set(BAT)
diff -Naur cmake-3.6.0/Tests/SimpleInstallS2/CMakeLists.txt cmake-3.6.0-msys/Tests/SimpleInstallS2/CMakeLists.txt
--- cmake-3.6.0/Tests/SimpleInstallS2/CMakeLists.txt	2013-07-02 17:41:40.000000000 +0400
+++ cmake-3.6.0-msys/Tests/SimpleInstallS2/CMakeLists.txt	2014-04-06 23:36:14.574400000 +0400
@@ -44,7 +44,7 @@
     message(SEND_ERROR "Stage 1 did not run install script 2.")
   endif()
 
-  if(CYGWIN OR MINGW)
+  if(CYGWIN OR MSYS OR MINGW)
     set(LIBPATHS ${LIBPATHS} "${CMAKE_INSTALL_PREFIX}/MyTest/bin")
   endif()
   message("Search for library in: ${LIBPATHS}")
@@ -110,7 +110,7 @@
   endif()
 
   # Check that scripts properly installed.
-  if(WIN32 AND NOT CYGWIN)
+  if(WIN32 AND NOT CYGWIN AND NOT MSYS)
     set(BAT .bat)
   else()
     set(BAT)
diff -aur cmake-3.6.0/Utilities/cmlibarchive/CMakeLists.txt.orig cmake-3.6.0/Utilities/cmlibarchive/CMakeLists.txt
--- cmake-3.6.0/Utilities/cmlibarchive/CMakeLists.txt.orig	2016-04-15 09:41:29.000000000 -0400
+++ cmake-3.6.0/Utilities/cmlibarchive/CMakeLists.txt	2016-05-22 14:54:15.233756400 -0400
@@ -152,7 +152,7 @@
 #
 MACRO (TRY_MACRO_FOR_LIBRARY INCLUDES LIBRARIES
        TRY_TYPE SAMPLE_SOURCE MACRO_LIST)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     CMAKE_PUSH_CHECK_STATE()	# Save the state of the variables
     SET(CMAKE_REQUIRED_INCLUDES ${INCLUDES})
     SET(CMAKE_REQUIRED_LIBRARIES ${LIBRARIES})
@@ -177,15 +177,15 @@
           "Macro ${VAR} is checked with")
     ENDFOREACH(VAR)
     CMAKE_POP_CHECK_STATE()	# Restore the state of the variables
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ENDMACRO (TRY_MACRO_FOR_LIBRARY)
 #
 # Check compress/decompress libraries
 #
-IF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)
+IF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN AND NOT MSYS)
   # GnuWin32 is only for Win32, not Win64.
   SET(__GNUWIN32PATH "C:/Program Files/GnuWin32")
-ENDIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CMAKE_CL_64 AND NOT CYGWIN AND NOT MSYS)
 IF(DEFINED __GNUWIN32PATH AND EXISTS "${__GNUWIN32PATH}")
   # You have to add a path availabel DLL file into PATH environment variable.
   # Maybe DLL path is "C:/Program Files/GnuWin32/bin".
@@ -228,7 +228,7 @@
   SET(HAVE_ZLIB_H 1)
   INCLUDE_DIRECTORIES(${ZLIB_INCLUDE_DIR})
   LIST(APPEND ADDITIONAL_LIBS ${ZLIB_LIBRARIES})
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     #
     # Test if ZLIB_WINAPI macro is needed to use.
     #
@@ -250,7 +250,7 @@
         ADD_DEFINITIONS(-DZLIB_DLL)
       ENDIF(ZLIB_DLL)
     ENDIF(ZLIB_WINAPI)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ELSE(ZLIB_FOUND)
   MESSAGE(FATAL_ERROR "CMake requires zlib to be available to libarchive")
 ENDIF(ZLIB_FOUND)
@@ -634,7 +634,7 @@
 # of Windows XP do not support SHA256, SHA384 and SHA512.
 #
 MACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)
-  IF(WIN32 AND NOT CYGWIN)
+  IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
     FOREACH(CRYPTO ${CRYPTO_LIST})
       IF(NOT ARCHIVE_CRYPTO_${CRYPTO})
       IF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)
@@ -701,7 +701,7 @@
       ENDIF(NOT DEFINED ARCHIVE_CRYPTO_${CRYPTO}_WIN)
       ENDIF(NOT ARCHIVE_CRYPTO_${CRYPTO})
     ENDFOREACH(CRYPTO)
-  ENDIF(WIN32 AND NOT CYGWIN)
+  ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 ENDMACRO(CHECK_CRYPTO_WIN CRYPTO_LIST)
 
 #
@@ -1363,7 +1363,7 @@
 #
 # Register installation of PDF documents.
 #
-IF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
   #
   # On Windows platform, It's better that we install PDF documents
   # on one's computer.
@@ -1375,7 +1375,7 @@
             FILES_MATCHING PATTERN "*.pdf"
     )
   ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/doc/pdf)
-ENDIF(WIN32 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 #
 #
 #
diff -aur cmake-3.6.0/Utilities/cmlibarchive/libarchive/CMakeLists.txt.orig cmake-3.6.0/Utilities/cmlibarchive/libarchive/CMakeLists.txt
--- cmake-3.6.0/Utilities/cmlibarchive/libarchive/CMakeLists.txt.orig	2016-04-15 09:41:29.000000000 -0400
+++ cmake-3.6.0/Utilities/cmlibarchive/libarchive/CMakeLists.txt	2016-05-22 17:37:02.642679500 -0400
@@ -180,14 +180,14 @@
   tar.5
 )
 
-IF(WIN32 AND NOT CYGWIN)
+IF(WIN32 AND NOT CYGWIN AND NOT MSYS)
   LIST(APPEND libarchive_SOURCES archive_entry_copy_bhfi.c)
   LIST(APPEND libarchive_SOURCES archive_read_disk_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.c)
   LIST(APPEND libarchive_SOURCES archive_windows.h)
   LIST(APPEND libarchive_SOURCES archive_write_disk_windows.c)
   LIST(APPEND libarchive_SOURCES filter_fork_windows.c)
-ENDIF(WIN32 AND NOT CYGWIN)
+ENDIF(WIN32 AND NOT CYGWIN AND NOT MSYS)
 
 # CMake needs just one static "cmlibarchive" library.
 ADD_LIBRARY(cmlibarchive STATIC ${libarchive_SOURCES} ${include_HEADERS})
diff -aur cmake-3.6.0/Utilities/Release/release_cmake.cmake.orig cmake-3.6.0/Utilities/Release/release_cmake.cmake
--- cmake-3.6.0/Utilities/Release/release_cmake.cmake.orig	2016-04-15 09:41:29.000000000 -0400
+++ cmake-3.6.0/Utilities/Release/release_cmake.cmake	2016-05-22 15:05:16.234560500 -0400
@@ -112,6 +112,10 @@
     set(SUFFIXES ${SUFFIXES} "*.tar.bz2")
     set(extra_files setup.hint)
   endif()
+  if("${gen}" MATCHES "MSYS")
+    set(SUFFIXES ${SUFFIXES} "*.tar.bz2")
+    set(extra_files setup.hint)
+  endif()
   if("${gen}" STREQUAL "TZ")
     set(SUFFIXES ${SUFFIXES} "*.tar.Z")
   endif()

